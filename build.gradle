buildscript {
  repositories {
	  mavenCentral()
  }
  dependencies {
    classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.2'
    classpath 'commons-io:commons-io:2.4'
    classpath 'org.ajoberstar:grgit:1.4.1'
  }
}

plugins {
  id 'java'
  id 'idea'
  id 'eclipse'
  id 'jaci.openrio.gradle.GradleRIO' version '2017.1.0'
  id 'org.ajoberstar.grgit' version '1.3.2'
  id 'org.ajoberstar.release-opinion' version '1.3.2'
	id 'maven-publish'
	id 'org.hidetake.ssh' version '2.8.0'
}

frc {
	team = "1294"
	robotClass = "org.usfirst.frc.team1294.robot.Robot"
    rioIP = "10.12.94.75"
}

repositories {
    mavenCentral()
}

dependencies {
    compile wpilib()
    compile talonSrx()
    compile fileTree(dir: 'libs', include: '**/*.jar')

    testCompile group: 'org.testng', name: 'testng', version: '6.9.13.6'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.5.2'
}

task wrapper(type: Wrapper) {
  gradleVersion = '3.3'
}

publishing {
	publications {
		MyPublication(MavenPublication) {
			from components.java
			groupId 'org.usfirst.frc.team1294'
			artifactId 'frc2017'
			version project.version.toString()
		}
	}
}

model {
	tasks.generatePomFileForMyPublicationPublication {
		destination = file("$buildDir/frc2017-${project.version.toString()}.pom")
	}
}

jar {
	archiveName = "frc1294.jar"
	manifest {
		attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase'
		attributes 'Robot-Class': frc.robotClass
		attributes 'Version' : project.version.toString()
		attributes 'Author' : getAuthor()
	}
	from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

task generateBintrayFile(type: Copy) {
	def vcs_tag = project.version.toString() // default to version
	grgit = org.ajoberstar.grgit.Grgit.open(project.file('.'))
	try {
		vcs_tag = grgit.log(maxCommits: 1).get(0).id
	} catch(all) {}

	from(projectDir) {
		include 'bintray.json'
	}
	expand(
		version: project.version.toString(),
		date: new Date().format('yyyy-MM-dd'),
		vcs_tag: vcs_tag
	)
	into 'build'
}

release {
  // need to specify the repository to interact with
  grgit = org.ajoberstar.grgit.Grgit.open(project.file('.'))
}


test {
    useTestNG {
        include('**/*')
        if (!project.hasProperty('test.vision'))
            getExcludeGroups().add('vision')
    }
}

def getAuthor() {
  def author = "unknown"
  grgit = org.ajoberstar.grgit.Grgit.open(project.file('.'))
  if (grgit.status().isClean()) {
    def history = grgit.log(maxCommits: 1)
    author = "${history.author.name[0]} <${history.author.email[0]}>"
  } else {
    author = System.env.USER ?: System.env.USERNAME
  }
  return author
}


remotes {
	roborio {
		host = "roboRIO-${project.frc.team}-frc.local"
		user = "lvuser"
	}
}

task deployUsingSsh {
	ssh.run {
		session(remotes.roborio) {
			put from: "${project.jar.archivePath}", into: "${project.jar.archivePath.getName()}"
			execute '/etc/profile.d/natinst-path.sh; /usr/local/frc/bin/frcKillRobot.sh -t -r'
		}
	}
}
